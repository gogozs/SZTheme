design
===
3. selector <=> UIView subclass instance
2. attribute_name <=> ivar


selector_name:
- class <=> .Button
- id <=> #firstname

attribute_name:
- titleColor


## generate theme
JSON to dictionary

```
{
    selector: {
    	state: attribute,
		attribute
    }
}


selector	: class | id
attribute	: attribute_name: attribute_value
state		: normal | selected | ...

```

e.g.,
```
{
    ".button": {
	    "normal": {"titleColor": "#F13FA5"},
	    "selected": {"titleColor": "#ff0000"},
	    "backgroundColor": "#ffffff",
    },
    "#firstname": {
        "backgroundColor": "#ffffff"
    }
}
```

```
ThemeManager:
	- views: [UIView]
	
Theme:
	- styles: [String: Style] # selector_name: Style
	
Style:
	- [Attribute]

Attribute:
	- state?
	- attribute_name
	- attribute_value

```

def generate_styles
	json.each |key, value|
		selector_name = key
		styles[selector_name] = Style.new
	end
end

UIView <StyleApply>:
	- applyStyle(Style)

 
## apply style
1. when
after views' move to super view

2. what

if view.selector_name in styles
	view apply_style(styles[selector_name])
end


3. how
- selector-a
	state-a:attributed_name, attribute_value


## update style
def upadte_style

end


